<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/security
                    http://www.springframework.org/schema/security/spring-security.xsd
                    http://www.springframework.org/schema/security/oauth2
                    http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

    <!--  /oauth/token 是oauth2登陆验证请求的url     用于获取access_token  ,默认的生存时间是43200秒，即12小时-->
    <sec:http pattern="/oauth/token"
              create-session="stateless"
              use-expressions="false"
              authentication-manager-ref="oauth2AuthenticationManager">
        <sec:intercept-url pattern="/oauth/token"
                           access="IS_AUTHENTICATED_FULLY"/>     <!--  可以访问的角色名称，如果需要拦截，需要实现UserDetails接口，实现getAuthorities（）方法-->
        <sec:anonymous enabled="false"/>
        <sec:http-basic entry-point-ref="oauth2AuthenticationEntryPoint"/>
        <sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
                           before="BASIC_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oauth2AccessDeniedHandler"/>
        <sec:csrf disabled="true"/>
    </sec:http>

    <sec:http pattern="/api/**"
              create-session="never"
              entry-point-ref="oauth2AuthenticationEntryPoint"
              access-decision-manager-ref="oauth2AccessDecisionManager"
              use-expressions="false">
        <sec:anonymous enabled="false"/>
        <sec:intercept-url pattern="/api/**" access="ROLE_USER"/>
        <sec:custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oauth2AccessDeniedHandler"/>
    </sec:http>

    <!-- 验证Client的权限控制 -->
    <sec:authentication-manager id="oauth2AuthenticationManager">
        <sec:authentication-provider user-service-ref="oauth2ClientDetailsUserService"/>
    </sec:authentication-manager>

    <bean id="oauth2ClientDetailsUserService"
          class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetailsService"/>
    </bean>

    <oauth2:client-details-service id="clientDetailsService">
        <oauth2:client client-id="mobile_1"
                       secret="secret_1"
                       authorized-grant-types="password,authorization_code,refresh_token,implicit"
                       scope="read,write,trust"/>
    </oauth2:client-details-service>

    <!-- 验证的权限控制 -->
    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider>
            <sec:user-service>
                <sec:user name="zhcen" password="123456" authorities="ROLE_USER"/>
                <sec:user name="jerry" password="123456" authorities="ROLE_ADMIN"/>
            </sec:user-service>
        </sec:authentication-provider>
    </sec:authentication-manager>

    <!-- for spring oauth2 -->
    <!--token在服务器存储的方式-->
    <bean id="tokenStore"
          class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore"/>
    <bean id="tokenServices"
          class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore"/>
    </bean>

    <!--处理访问成功-->
    <bean id="oauth2AuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>
    <!--处理访问拒绝-->
    <bean id="oauth2AccessDeniedHandler"
          class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>
    <!--处理认证点-->
    <bean id="oauthUserApprovalHandler"
          class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler"/>
    <!--处理访问控制-->
    <bean id="oauth2AccessDecisionManager"
          class="org.springframework.security.access.vote.UnanimousBased">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <bean class="org.springframework.security.access.vote.RoleVoter">
                    <property name="rolePrefix" value=""/>
                </bean>
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </list>
        </constructor-arg>
    </bean>

    <!--oauth2 的server所能支持的请求类型-->
    <oauth2:authorization-server
            client-details-service-ref="clientDetailsService"
            token-services-ref="tokenServices"
            user-approval-handler-ref="oauthUserApprovalHandler">
        <oauth2:authorization-code/>
        <oauth2:implicit/>
        <oauth2:refresh-token/>
        <oauth2:client-credentials/>
        <oauth2:password/>
    </oauth2:authorization-server>

    <bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="oauth2AuthenticationManager"/>
    </bean>

    <!--指定spring要保护的资源，如果没有这个，访问控制的时候会说没有Authentication object：-->
    <oauth2:resource-server id="mobileResourceServer"
                            resource-id="mobile-resource"
                            token-services-ref="tokenServices"/>


</beans>